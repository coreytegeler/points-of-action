// Generated by CoffeeScript 1.10.0
(function() {
  $(function() {
    var $body, $main, $mainForm, addCheckbox, addImage, addQuicky, closeQuicky, deleteObject, formSave, getData, initAdmin, loadQuicky, openDateOptions, openQuicky, populateCheckboxes, saveQuicky, selectDateOption, setupDateSelector, setupEditor, setupForm, setupSortable, updateTemplate;
    $body = $('body');
    $main = $('main');
    $mainForm = $('form.main');
    initAdmin = function() {
      setupForm($mainForm);
      $body.on('submit', 'form.main', formSave);
      $body.on('click', 'form .add', addQuicky);
      $body.on('click', 'form .images .edit', addQuicky);
      $body.on('click', '.quicky .close', closeQuicky);
      $body.on('submit', '.quicky form', saveQuicky);
      $body.on('click', 'a.delete', deleteObject);
      $body.on('click', '.dateselect .select', openDateOptions);
      return $body.on('click', '.dateselect .checkbox label', selectDateOption);
    };
    getData = function() {
      if (($('form .images').length)) {
        return $('form .images .image').each(function(i, imageWrap) {
          var id;
          if ($(imageWrap).is('.sample')) {
            return addQuicky('image');
          } else {
            id = $(imageWrap).attr('data-id');
            if (id) {
              return addQuicky('image', id);
            }
          }
        });
      }
    };
    setupForm = function(form) {
      populateCheckboxes(form);
      setupSortable(form);
      setupEditor(form);
      return setupDateSelector(form);
    };
    populateCheckboxes = function(form) {
      $(form).find('.populate:not(.populated)').each(function(i, container) {
        var label, model, type;
        model = $(container).data('model');
        type = $(container).data('type');
        label = $(container).prev('label').text();
        $(this).addClass('populated');
        if (model === 'historicUse') {
          model = 'use';
        }
        $.ajax({
          url: '/api/json/?type=' + model,
          error: function(jqXHR, status, error) {
            console.log(jqXHR, status, error);
          },
          success: function(objects, status, jqXHR) {
            var filterList, listId;
            if (!objects) {
              return;
            }
            listId = model + '-checkboxes';
            $(objects).each(function(i, object) {
              var checked;
              checked = $(container).data('checked');
              return addCheckbox(container, object, checked);
            });
            filterList = new List(listId, {
              valueNames: ['checkbox']
            });
            $(container).addClass('loaded');
          }
        });
      });
    };
    addCheckbox = function(container, object, checked) {
      var $checkbox, $input, $label, $options, checkedVal, id, j, len, model, slug, value, valueObject;
      if (!$.isArray(checked)) {
        checked = [checked];
      }
      $checkbox = $(container).find('.empty').clone().removeClass('empty');
      $checkbox.find('input').attr('checked', false);
      $options = $(container).find('.options');
      $label = $checkbox.find('label');
      $input = $checkbox.find('input');
      if (!object) {
        return;
      }
      if (typeof object === 'object') {
        if (object._id) {
          id = object._id;
        } else {
          id = object.id;
        }
        valueObject = {
          name: object.name,
          slug: object.slug,
          id: id
        };
        slug = valueObject.slug;
        value = JSON.stringify(valueObject);
      } else {
        value = {
          id: object
        };
        slug = value;
      }
      model = $(container).data('model');
      $input.attr('value', value).attr('id', model + '-' + object.slug);
      $label.text(object.name).attr('for', model + '-' + object.slug);
      if (checked) {
        for (j = 0, len = checked.length; j < len; j++) {
          checkedVal = checked[j];
          try {
            checkedVal = JSON.parse(checkedVal).id;
          } catch (undefined) {}
          if (valueObject.id === checkedVal.id) {
            $input.attr('checked', true);
          }
        }
      }
      $checkbox.attr('data-slug', slug);
      $options.prepend($checkbox);
      $(container).addClass('loaded');
      return $checkbox;
    };
    formSave = function(event) {
      return $(window.editors).each(function() {
        var $inputHTML, $inputJSON, editor, html, json, name;
        editor = this;
        name = editor.container.dataset.name;
        $inputHTML = $('input[name="' + name + 'HTML"]');
        $inputJSON = $('input[name="' + name + 'JSON"]');
        if ((json = editor.getContents())) {
          json = JSON.stringify(json);
          $inputJSON.val(json);
        }
        if ((html = editor.root.innerHTML)) {
          return $inputHTML.val(html);
        }
      });
    };
    addQuicky = function() {
      var $button, id, type;
      console.log(this);
      $button = $(this);
      id = $button.data('id');
      type = $button.data('type');
      if (!id && $('.quicky.create[data-type="' + type + '"]').length) {
        return openQuicky($('.quicky.create[data-type="' + type + '"]'));
      } else if (($('.quicky.edit[data-id="' + id + '"]').length)) {
        return openQuicky($('.quicky.edit[data-id="' + id + '"]'));
      } else {
        return loadQuicky(type, id);
      }
    };
    loadQuicky = function(type, id, label) {
      var $quicky, url;
      if (($quicky = $('.quicky[data-id="' + id + '"]').length)) {
        $quicky.addClass('open');
        return $quicky.find('input[name="name"]').focus();
      } else {
        url = '/admin/' + type + '/quicky/';
        if (id) {
          url += id;
        }
        return $.ajax({
          url: url,
          error: function(jqXHR, status, error) {
            console.log(jqXHR, status, error);
          },
          success: function(html, status, jqXHR) {
            var $form;
            if (!html) {
              return;
            }
            $quicky = $(html);
            $('.quickies').append($quicky);
            $form = $quicky.find('form');
            setupForm($form);
            return openQuicky($quicky);
          }
        });
      }
    };
    openQuicky = function(quicky) {
      $(quicky).addClass('open');
      return $(quicky).find('input[name="name"]').focus();
    };
    closeQuicky = function(quicky) {
      var $quicky;
      if (quicky.length) {
        $quicky = $(quicky);
      } else {
        $quicky = $(this).parents('.quicky');
      }
      if (!$quicky.is('[data-type="image"]')) {
        $quicky.find('input:not([type="submit"])').each(function(i, input) {
          return $(input).val('');
        });
      }
      $quicky.removeClass('open');
      $quicky.removeClass('saving');
    };
    saveQuicky = function(event) {
      var $form, $quicky, caption, contentType, data, id, image, postUrl, processData, type;
      event.stopPropagation();
      event.preventDefault();
      $form = $(this);
      $quicky = $form.parents('.quicky');
      id = $quicky.data('id');
      type = $quicky.data('type');
      data = new FormData();
      if (type === 'image' && !id.length) {
        image = $form.find('input:file')[0].files[0];
        caption = $form.find('input.caption').val();
        data.set('image', image, image.name);
        data.set('caption', caption);
        contentType = false;
        processData = false;
      } else {
        data = $form.serializeArray();
        contentType = 'application/x-www-form-urlencoded; charset=UTF-8';
        processData = true;
      }
      postUrl = $form.attr('action');
      if (!data) {
        return;
      }
      $quicky.addClass('saving');
      $.ajax({
        type: 'POST',
        data: data,
        url: postUrl,
        processData: processData,
        contentType: contentType,
        error: function(jqXHR, status, error) {
          console.log(postUrl, jqXHR, status, error);
          return alert('Error, check browser console logs');
        },
        success: function(object, status, jqXHR) {
          var checkboxes, checked;
          type = $quicky.data('type');
          checkboxes = $('.checkboxes.' + type);
          checked = {
            id: object._id
          };
          if (checkboxes.length) {
            addCheckbox(checkboxes, object, checked);
          } else if (type === 'image') {
            addImage(object);
          }
          $quicky.removeClass('saving');
          return closeQuicky($quicky);
        }
      });
    };
    addImage = function(object) {
      var $clone, $imagesInput, $imagesWrapper, i, imageObject, imagesInputVal, newImg, thisObject, updating;
      $imagesWrapper = $('form.main').find('.images');
      $imagesInput = $imagesWrapper.find('input:text');
      addQuicky('image', object._id, '');
      imageObject = {
        id: object._id,
        original: object.original,
        medium: object.medium,
        small: object.small,
        caption: object.caption
      };
      if ($imagesInput.val()) {
        imagesInputVal = JSON.parse($imagesInput.val());
      } else {
        imagesInputVal = [];
      }
      updating = false;
      if (imagesInputVal.length) {
        for (i in imagesInputVal) {
          thisObject = imagesInputVal[i];
          if (thisObject.id === imageObject.id) {
            imagesInputVal[i] = imageObject;
            updating = true;
          }
        }
        if (!updating) {
          imagesInputVal.push(imageObject);
        }
      } else {
        imagesInputVal = [imageObject];
      }
      $imagesInput.val(JSON.stringify(imagesInputVal));
      if (!$imagesWrapper.find('.image[data-id="' + object._id + '"]').length) {
        $clone = $imagesWrapper.find('.sample').clone();
        $clone.removeClass('sample');
        $clone.attr('data-id', imageObject.id);
        newImg = new Image();
        newImg.onload = function() {
          $clone.find('img').remove();
          $clone.append(this);
          $clone.find('.caption').text(imageObject.caption);
          return $imagesWrapper.find('.ui-sortable').append($clone);
        };
        return newImg.src = imageObject.original;
      }
    };
    updateTemplate = function(event) {
      var $input, value;
      $input = $(event.target);
      value = $input.val();
      $('[data-template]').removeClass('show');
      return $('[data-template="' + value + '"]').addClass('show');
    };
    deleteObject = function(event) {
      var $input, $quicky, id, inputVal;
      if (!confirm('Are you sure you want to delete this?')) {
        return event.preventDefault();
      }
      $quicky = $(this).parents('.quicky');
      if ($quicky.length) {
        id = $quicky.attr('data-id');
        $input = $('.images input:text[name="images"]');
        inputVal = JSON.parse($input.val());
        inputVal = inputVal.filter(function(image) {
          return image.id !== id;
        });
        inputVal = JSON.stringify(inputVal);
        $input.val(inputVal);
        $('.image[data-id="' + id + '"]').remove();
        $quicky.remove();
        $main.removeClass('noscroll');
        return event.preventDefault();
      }
    };
    setupDateSelector = function(form) {
      return $(form).find('.dateselect').each(function(i, selects) {
        var $checkbox, $dayOptions, $monthOptions, $null, $yearOptions, checkedDay, checkedMonth, checkedYear, days, j, k, l, month, object, ref, results;
        $monthOptions = $(selects).find('.checkboxes.month');
        $null = $monthOptions.find('.checkbox.null');
        checkedMonth = {
          id: $monthOptions.data('checked').slug
        };
        for (i = j = 12; j > 0; i = --j) {
          month = moment.months(i - 1);
          days = moment(i, 'M').daysInMonth();
          object = {
            name: month,
            slug: i,
            id: i
          };
          $checkbox = addCheckbox($monthOptions, object, checkedMonth);
          $checkbox.attr('data-days', days);
        }
        $dayOptions = $(selects).find('.checkboxes.day');
        checkedDay = {
          id: $dayOptions.data('checked').slug
        };
        for (i = k = 31; k > 0; i = --k) {
          object = {
            name: i,
            slug: i,
            id: i
          };
          $checkbox = addCheckbox($dayOptions, object, checkedDay);
        }
        $yearOptions = $(selects).find('.checkboxes.year');
        checkedYear = {
          id: $yearOptions.data('checked').slug
        };
        results = [];
        for (i = l = ref = moment().year(); ref <= 1899 ? l < 1899 : l > 1899; i = ref <= 1899 ? ++l : --l) {
          object = {
            name: i,
            slug: i,
            id: i
          };
          results.push($checkbox = addCheckbox($yearOptions, object, checkedYear));
        }
        return results;
      });
    };
    openDateOptions = function(e) {
      var $checkboxes, $dateselect, type;
      $dateselect = $(this).parents('.dateselect');
      type = this.dataset.type;
      $checkboxes = $dateselect.find('.checkboxes.' + type);
      $dateselect.find('.select:not(.' + type + ')').removeClass('selected');
      $dateselect.find('.checkboxes:not(.' + type + ')').removeClass('open');
      $(this).toggleClass('selected');
      return $checkboxes.toggleClass('open');
    };
    selectDateOption = function(e) {
      var $checkboxes, $dateselect, $select, object, type;
      $dateselect = $(this).parents('.dateselect');
      $checkboxes = $(this).parents('.checkboxes');
      type = $checkboxes.data('model');
      $select = $dateselect.find('.select.' + type);
      object = JSON.parse($(this).prev('input').val());
      $select.find('.display').text(object.name);
      return $select.find('.input').val(object.slug);
    };
    setupEditor = function(form) {
      var editorOpt, toolbarOpt;
      window.editors = [];
      toolbarOpt = [
        ['bold', 'italic', 'underline'], ['blockquote'], [
          {
            'header': 1
          }, {
            'header': 2
          }
        ], [
          {
            'list': 'ordered'
          }, {
            'list': 'bullet'
          }
        ], [
          {
            'script': 'sub'
          }, {
            'script': 'super'
          }
        ], [
          {
            'indent': '-1'
          }, {
            'indent': '+1'
          }
        ], [
          {
            'size': ['small', false, 'large', 'huge']
          }
        ], ['clean']
      ];
      editorOpt = {
        modules: {
          toolbar: toolbarOpt
        },
        theme: 'snow'
      };
      return $(form).find('.textarea').each(function(i, textarea) {
        var contents, editor, name;
        editor = new Quill(textarea, editorOpt);
        name = textarea.dataset.name;
        contents = $(form).find('input[name="' + name + 'HTML"]').val();
        if (contents.length) {
          editor.setContents(JSON.parse(contents));
        }
        return window.editors.push(editor);
      });
    };
    setupSortable = function(form) {
      var $sortable, sortable;
      $sortable = $(form).find('.sortable');
      sortable = $sortable.find('ul').sortable({
        update: function(e, elem) {
          var $sortableInput, imagesData, newOrder, newOrderClone, newOrderJson;
          newOrder = [];
          $sortableInput = $sortable.find('input');
          $(this).find('li').each(function() {
            var id;
            id = $(this).data('id');
            return newOrder.push(id);
          });
          if ($sortable.is('.images')) {
            imagesData = JSON.parse($sortableInput.val());
            newOrderClone = newOrder;
            $(imagesData).each(function() {
              var index;
              index = newOrder.indexOf(this.id);
              return newOrder[index] = this;
            });
          }
          newOrderJson = JSON.stringify(newOrder);
          return $sortable.find('input').val(newOrderJson);
        }
      });
      return sortable.disableSelection();
    };
    return initAdmin();
  });

}).call(this);
