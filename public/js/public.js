// Generated by CoffeeScript 1.10.0
(function() {
  $(function() {
    var $body, $intro, $introCanvas, $left, $map, $palette, $right, $window, centerPoint, clickLocLink, closeRight, colors, getFeature, getLocActions, getLocContent, getPoints, getUniqueFeatures, getUrl, initMap, introSetup, listLocActions, listLocs, mapClick, mapMouseMove, markersLayer, maxZoom, minZoom, nycLatLng, openLocPanel, plotMarker, plotMarkers, readUrl, windowResized, windowResizing, zoomIn, zoomOut;
    $window = $(window);
    $body = $('body');
    $map = $('#map');
    $intro = $('#intro');
    $introCanvas = $('#intro');
    $right = $('aside#right');
    $left = $('aside#left');
    markersLayer = [];
    window.markers = {};
    nycLatLng = {
      lat: 40.723952837100995,
      lng: -73.98725835012341
    };
    zoomIn = 15;
    zoomOut = 12;
    minZoom = 9.8;
    maxZoom = 20;
    initMap = function() {
      mapboxgl.accessToken = 'pk.eyJ1IjoiY29yZXl0ZWdlbGVyIiwiYSI6ImNpd25xZHV3cjAxMngyenFpeGd0aGxwanYifQ.quHbdI63gF-JNfVLCe_fTw';
      window.map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/coreytegeler/ciwnq6zxd004o2ppllvfpmx5x',
        center: nycLatLng,
        speed: 2,
        zoom: zoomOut,
        minZoom: minZoom,
        maxZoom: maxZoom,
        pitch: 15
      });
      return map.on('load', function() {
        getPoints();
        return $map.addClass('show');
      });
    };
    getFeature = function(featureName) {
      var url;
      url = '/geojson/' + featureName + '.json';
      $.getJSON({
        url: url,
        error: function(jqXHR, status, error) {
          console.error(jqXHR, status, error);
        },
        success: function(geojson, status, jqXHR) {
          map.addSource(featureName, {
            'type': 'geojson',
            'data': geojson
          });
          return map.addLayer({
            'id': featureName,
            'type': 'line',
            'source': featureName
          });
        }
      });
    };
    introSetup = function() {
      return $.each(map.queryRenderedFeatures(), function(i, layer) {
        var id;
        id = layer.layer.id;
        if (id === 'background') {
          console.log(layer);
        }
        return map.setLayoutProperty(id, 'visibility', 'none');
      });
    };
    getPoints = function() {
      var url;
      url = '/api/json/?type=location';
      $.ajax({
        url: url,
        error: function(jqXHR, status, error) {
          console.error(jqXHR, status, error);
        },
        success: function(response, status, jqXHR) {
          var id;
          plotMarkers(response);
          if ($right.is('.open')) {
            id = $right.data('id');
            return centerPoint(id);
          }
        }
      });
    };
    plotMarkers = function(locs) {
      var bounds, markersArray;
      markersArray = [];
      bounds = new mapboxgl.LngLatBounds();
      $.each(locs, function(i, loc) {
        var marker;
        marker = plotMarker(loc);
        bounds.extend(marker.geometry.coordinates);
        markersArray.push(marker);
        return markers[loc._id] = marker;
      });
      listLocs(locs);
      map.addSource('markers', {
        'type': 'geojson',
        'data': {
          'type': 'FeatureCollection',
          'features': markersArray
        }
      });
      map.addLayer({
        'id': 'markers',
        'source': 'markers',
        'type': 'circle',
        'paint': {
          'circle-radius': 6,
          'circle-color': colors.darker
        }
      });
      map.fitBounds(bounds, {
        padding: 50,
        animate: false
      });
      map.on('mousemove', mapMouseMove);
      return map.on('click', mapClick);
    };
    plotMarker = function(loc) {
      var lat, lng, marker;
      if (!loc.point) {
        return;
      }
      lng = loc.point.longitude;
      lat = loc.point.latitude;
      marker = {
        'type': 'Feature',
        'geometry': {
          'type': 'Point',
          'coordinates': [lng, lat]
        },
        'properties': {
          'id': loc._id,
          'title': loc.name,
          'name': loc.name,
          'slug': loc.slug,
          'address': loc.pointAddress
        }
      };
      return marker;
    };
    getLocContent = function(id, title) {
      var url;
      url = '/api/html/?type=location&id=' + id;
      $.ajax({
        url: url,
        error: function(jqXHR, status, error) {
          console.error(jqXHR, status, error);
        },
        success: function(response, status, jqXHR) {
          return openLocPanel(id, title, response);
        }
      });
    };
    openLocPanel = function(id, title, response) {
      $right.find('.title h1').html(title);
      if (!$.isEmptyObject(markers)) {
        centerPoint(id);
      }
      getLocActions(id);
      $right.find('.content').html(response);
      $right.attr('data-id', id);
      $right.addClass('show');
      $right.addClass('open');
      return $left.removeClass('open');
    };
    centerPoint = function(id) {
      var currentZoom, flyTo, latlng, marker, pixelCoords, xOffset, zoomOffset;
      marker = markers[id];
      latlng = marker.geometry.coordinates;
      currentZoom = map.getZoom();
      zoomOffset = currentZoom / zoomIn;
      pixelCoords = map.project(marker.geometry.coordinates);
      xOffset = 0.375 * map._containerDimensions()[0];
      pixelCoords.x = pixelCoords.x + xOffset;
      flyTo = map.unproject(pixelCoords);
      $map.attr('data-zoom', currentZoom);
      return map.flyTo({
        center: flyTo,
        curve: 1
      }, {
        bearing: 0,
        speed: .1
      });
    };
    getLocActions = function(id) {
      var url;
      url = '/api/html/?type=action&filter=location&id=' + id;
      return $.ajax({
        url: url,
        error: function(jqXHR, status, error) {
          console.error(jqXHR, status, error);
        },
        success: function(content, status, jqXHR) {
          return listLocActions(id, content);
        }
      });
    };
    listLocActions = function(id, content) {
      var $actions, $content;
      $content = $(content);
      $actions = $right.find('.actions');
      $actions.append($content);
      return $content.imagesLoaded().progress(function(inst, image) {
        var $image, $img;
        $img = $(image.img);
        $image = $img.parent();
        return $image.addClass('loaded');
      });
    };
    closeRight = function(e) {
      var zoomTo;
      $right.removeClass('open');
      zoomTo = $map.attr('data-zoom');
      if (zoomTo) {
        return map.zoomTo(zoomTo);
      }
    };
    getUniqueFeatures = function(array, comparatorProperty) {
      var existingFeatureKeys, uniqueFeatures;
      existingFeatureKeys = {};
      uniqueFeatures = array.filter(function(el) {
        if (existingFeatureKeys[el.properties[comparatorProperty]]) {
          return false;
        } else {
          existingFeatureKeys[el.properties[comparatorProperty]] = true;
          return true;
        }
      });
      return uniqueFeatures;
    };
    listLocs = function(locs) {
      var $leftList;
      $leftList = $left.find('ul');
      $leftList.html('');
      $.each(locs, function(id, loc) {
        var $locLink, address, name, slug, url;
        id = loc._id;
        slug = loc.slug;
        name = loc.name;
        address = loc.pointAddress;
        url = getUrl('location', slug);
        $locLink = $('<li class="loc link"><a href="' + url + '" data-id="' + id + '" data-title="' + name + '"><div class="name">' + name + '</div><div class="address">' + address + '</div></div></li>');
        return $leftList.append($locLink);
      });
      $left.addClass('show');
      if (!$right.is('.open')) {
        return $left.addClass('open');
      }
    };
    mapMouseMove = function(e) {
      var features;
      features = map.queryRenderedFeatures(e.point, {
        layers: ['markers']
      });
      if (features.length) {
        return map.getCanvas().style.cursor = 'pointer';
      } else {
        return map.getCanvas().style.cursor = '';
      }
    };
    mapClick = function(e) {
      var features, id, marker, title;
      features = map.queryRenderedFeatures(e.point, {
        layers: ['markers']
      });
      if (features.length) {
        marker = features[0];
        id = marker.properties.id;
        title = marker.properties.title;
        return getLocContent(id, title);
      }
    };
    clickLocLink = function(e) {
      var id, title;
      e.preventDefault();
      id = this.dataset.id;
      title = this.dataset.title;
      return getLocContent(id, title);
    };
    getUrl = function(model, slug) {
      var root;
      root = $body.data('root');
      root = '/';
      return root + model + '/' + slug;
    };
    readUrl = function() {
      var id, model;
      id = $body.data('id');
      model = $body.data('model');
      switch (model) {
        case 'location':
          getLocContent(id);
          break;
      }
    };
    windowResizing = function() {
      $('aside').addClass('static');
      clearTimeout(window.timeout);
      return window.timeout = setTimeout(windowResized, 300);
    };
    windowResized = function() {
      return $('aside').removeClass('static');
    };
    $body.on('click touchend', '.right.open .band', closeRight);
    $body.on('change', '#points input', listLocs);
    $body.on('click', '.locations ul li.loc a', clickLocLink);
    $window.on('resize', windowResizing);
    $palette = $('#palette');
    colors = {
      white: $palette.find('.white').css('color'),
      light: $palette.find('.light').css('color'),
      medium: $palette.find('.medium').css('color'),
      dark: $palette.find('.dark').css('color'),
      darker: $palette.find('.darker').css('color'),
      black: $palette.find('.black').css('color'),
      yellow: $palette.find('.yellow').css('color')
    };
    readUrl();
    return initMap();
  });

}).call(this);
