// Generated by CoffeeScript 1.10.0
(function() {
  $(function() {
    var $aside, $map, clickPoint, getLocActions, getLocContent, getPoints, initMap, listLocActions, openLoc, plotPoint, plotPoints, pointRadius, pointsLayer;
    $map = $('#map');
    $aside = $('aside');
    pointsLayer = [];
    initMap = function() {
      var tiles;
      window.map = L.map('map', {
        center: [40.7128, -74.0059],
        zoom: 10
      });
      tiles = L.tileLayer('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="http://cartodb.com/attributions">CartoDB</a>',
        subdomains: 'abcd',
        minZoom: 10,
        zoom: {
          animate: false
        }
      }).addTo(map);
      return getPoints();
    };
    getPoints = function() {
      var url;
      url = '/api/?type=location';
      $.ajax({
        url: url,
        error: function(jqXHR, status, error) {
          console.error(jqXHR, status, error);
        },
        success: function(response, status, jqXHR) {
          return plotPoints(response);
        }
      });
    };
    plotPoints = function(locs) {
      var points;
      points = [];
      $.each(locs, function(i, loc) {
        var point;
        point = plotPoint(loc);
        getLocActions(loc, point);
        point.addTo(map);
        return points.push(point._latlng);
      });
      if (points.length) {
        map.fitBounds(points, {
          padding: [50, 50],
          animate: false
        });
      }
      return $map.addClass('show');
    };
    pointRadius = 8;
    plotPoint = function(loc) {
      var lat, lng, point;
      if (!loc.point) {
        return;
      }
      lat = loc.point.latitude;
      lng = loc.point.longitude;
      point = new L.circleMarker([lat, lng], {
        type: loc.type,
        id: loc._id,
        slug: loc.slug,
        fillOpacity: 1,
        weight: 2,
        radius: pointRadius,
        className: 'point'
      }).on('mouseover', function() {
        $(this._path).addClass('hover');
        if (!$(this._path).is('.selected')) {
          return this.openPopup();
        }
      }).on('mouseout', function() {
        $(this._path).removeClass('hover');
        return this.closePopup();
      }).on('click', function(e) {
        return clickPoint(this);
      });
      return point;
    };
    getLocActions = function(loc, point) {
      var url;
      url = '/api/?type=action&filter=location&id=' + loc._id;
      return $.ajax({
        url: url,
        error: function(jqXHR, status, error) {
          console.error(jqXHR, status, error);
        },
        success: function(actions, status, jqXHR) {
          point.setStyle({
            radius: pointRadius + (actions.length * 2)
          });
          return listLocActions(loc, point, actions);
        }
      });
    };
    listLocActions = function(loc, point, actions) {
      var $popup;
      $popup = $('.popup.sample').clone();
      $popup.removeClass('sample').addClass('location').attr('data-id', loc._id);
      return $.each(actions, function(i, action) {
        var $action;
        $action = $('<li><a href="/?type=action&id=' + action._id + '">' + action.name + '</a></li>');
        return $popup.find('ul').append($action);
      });
    };
    clickPoint = function(point) {
      getLocContent(point);
      point.closePopup();
      $('.point.selected').removeClass('selected');
      return $(point._path).addClass('selected');
    };
    getLocContent = function(point) {
      var id, type, url;
      type = point.options.type;
      id = point.options.id;
      url = '/content/?type=' + type + '&id=' + id;
      $.ajax({
        url: url,
        error: function(jqXHR, status, error) {
          console.error(jqXHR, status, error);
        },
        success: function(response, status, jqXHR) {
          return openLoc(type, id, response, point);
        }
      });
    };
    openLoc = function(type, id, response, point) {
      $aside.find('.content').html(response);
      return $aside.find('.lead').imagesLoaded(function() {
        var latlng, latlngPixel;
        $(this.elements[0]).addClass('loaded');
        imagesLoaded($aside).on('progress', function(inst, image) {
          return $(image.img).addClass('loaded');
        });
        latlng = point._latlng;
        if (!$map.is('.thin')) {
          latlngPixel = map.latLngToLayerPoint(latlng);
          latlng = map.layerPointToLatLng([latlngPixel.x + $map.innerWidth() / 2.666, latlngPixel.y]);
        }
        return setTimeout(function() {
          map.invalidateSize();
          map.panTo(latlng);
          $aside.addClass('show');
          $map.addClass('thin');
          return map.invalidateSize();
        }, 100);
      });
    };
    return initMap();
  });

}).call(this);
