// Generated by CoffeeScript 1.10.0
(function() {
  $(function() {
    var $body, $left, $map, $right, $window, closeFloater, closeRight, colors, getFeature, getLocContent, getMarkers, getUniqueFeatures, initMap, listLocations, mapClick, mapMouseMove, markersLayer, maxZoom, minZoom, nycLatLng, openLocPanel, plotMarker, plotMarkers, zoomIn, zoomOut;
    $window = $(window);
    $body = $('body');
    $map = $('#map');
    $right = $('#right.float');
    $left = $('#left.float');
    markersLayer = [];
    nycLatLng = {
      lat: 40.723952837100995,
      lng: -73.98725835012341
    };
    zoomIn = 17;
    zoomOut = 12;
    minZoom = 9.8;
    maxZoom = 20;
    initMap = function() {
      mapboxgl.accessToken = 'pk.eyJ1IjoiY29yZXl0ZWdlbGVyIiwiYSI6ImNpd25xZHV3cjAxMngyenFpeGd0aGxwanYifQ.quHbdI63gF-JNfVLCe_fTw';
      window.map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/coreytegeler/ciwnq6zxd004o2ppllvfpmx5x',
        center: nycLatLng,
        speed: 2,
        zoom: zoomOut,
        minZoom: minZoom,
        maxZoom: maxZoom,
        pitch: 15
      });
      return map.on('load', function() {
        getMarkers();
        getFeature('boroughs');
        $map.addClass('show');
        return map.on('moveend', listLocations);
      });
    };
    getFeature = function(featureName) {
      var url;
      url = '/geojson/' + featureName + '.json';
      $.getJSON({
        url: url,
        error: function(jqXHR, status, error) {
          console.error(jqXHR, status, error);
        },
        success: function(response, status, jqXHR) {
          map.addSource(featureName, {
            'type': 'geojson',
            'data': response
          });
          return map.addLayer({
            'id': featureName,
            'type': 'line',
            'source': featureName
          });
        }
      });
    };
    getMarkers = function() {
      var url;
      url = '/api/?type=location';
      $.ajax({
        url: url,
        error: function(jqXHR, status, error) {
          console.error(jqXHR, status, error);
        },
        success: function(response, status, jqXHR) {
          return plotMarkers(response);
        }
      });
    };
    plotMarkers = function(locs) {
      var bounds;
      window.markers = [];
      bounds = new mapboxgl.LngLatBounds();
      $.each(locs, function(i, loc) {
        var marker;
        marker = plotMarker(loc);
        bounds.extend(marker.geometry.coordinates);
        return markers.push(marker);
      });
      map.addSource('markers', {
        'type': 'geojson',
        'data': {
          'type': 'FeatureCollection',
          'features': markers
        }
      });
      map.addLayer({
        'id': 'markers',
        'source': 'markers',
        'type': 'circle',
        'paint': {
          'circle-radius': 6,
          'circle-color': colors.yellow
        }
      });
      map.fitBounds(bounds, {
        padding: 50,
        animate: false
      });
      map.on('mousemove', mapMouseMove);
      return map.on('click', mapClick);
    };
    plotMarker = function(loc) {
      var lat, lng, marker;
      if (!loc.point) {
        return;
      }
      lng = loc.point.longitude;
      lat = loc.point.latitude;
      marker = {
        'type': 'Feature',
        'geometry': {
          'type': 'Point',
          'coordinates': [lng, lat]
        },
        'properties': {
          'id': loc._id,
          'title': loc.name,
          'name': loc.name,
          'slug': loc.slug,
          'address': loc.pointAddress
        }
      };
      return marker;
    };
    getLocContent = function(marker) {
      var id, title, url;
      id = marker.properties.id;
      title = marker.properties.title;
      url = '/content/?type=location&id=' + id;
      $.ajax({
        url: url,
        error: function(jqXHR, status, error) {
          console.error(jqXHR, status, error);
        },
        success: function(response, status, jqXHR) {
          return openLocPanel(id, title, response, marker);
        }
      });
    };
    openLocPanel = function(id, title, response, marker) {
      var flyTo, latlng, position, x, y;
      latlng = marker.geometry.coordinates;
      $right.find('.title h1').html(title);
      if (!$body.is('.opened')) {
        position = marker._vectorTileFeature;
        x = position._x;
        y = position._y;
      }
      flyTo = marker.geometry.coordinates;
      $map.attr('data-zoom', map.getZoom());
      map.flyTo({
        center: flyTo,
        curve: 1,
        zoom: zoomIn
      }, {
        bearing: 0,
        speed: .1
      }, $body.addClass('opened'));
      $left.transition({
        x: -$window.innerWidth()
      }, {
        scale: .9
      }, 500, 'easeInOutQuint');
      $right.transition({
        x: 0,
        scale: 1
      }, 500, 'easeInOutQuint', function() {
        console.log('!');
        return $right.find('.content').html(response);
      });
      return $right.find('.lead').imagesLoaded(function() {
        $(this.elements[0]).addClass('loaded');
        return imagesLoaded($right).on('progress', function(inst, image) {
          return $(image.img).addClass('loaded');
        });
      });
    };
    closeRight = function(e) {
      var zoomTo;
      $body.removeClass('opened');
      $right.transition({
        x: $window.innerWidth(),
        scale: .9
      });
      $left.transition({
        x: 0,
        scale: 1
      });
      zoomTo = $map.attr('data-zoom');
      return map.zoomTo(zoomTo);
    };
    closeFloater = function(e) {
      var $floater;
      $floater = $(this).parents('.float');
      return $floater.toggleClass('hide');
    };
    getUniqueFeatures = function(array, comparatorProperty) {
      var existingFeatureKeys, uniqueFeatures;
      existingFeatureKeys = {};
      uniqueFeatures = array.filter(function(el) {
        if (existingFeatureKeys[el.properties[comparatorProperty]]) {
          return false;
        } else {
          existingFeatureKeys[el.properties[comparatorProperty]] = true;
          return true;
        }
      });
      return uniqueFeatures;
    };
    listLocations = function(e) {
      var $leftList, markers;
      markers = window.markers;
      $leftList = $left.find('ul');
      $leftList.html('');
      return markers.forEach(function(marker) {
        var address, id, name, slug;
        id = marker.properties.id;
        slug = marker.properties.slug;
        name = marker.properties.name;
        address = marker.properties.address;
        return $leftList.append('<li data-id="' + id + '"><div class="name">' + name + '</div><div class="address">' + address + '</div></li>');
      });
    };
    mapMouseMove = function(e) {
      var features;
      features = map.queryRenderedFeatures(e.point, {
        layers: ['markers']
      });
      if (features.length) {
        return map.getCanvas().style.cursor = 'pointer';
      } else {
        return map.getCanvas().style.cursor = '';
      }
    };
    mapClick = function(e) {
      var features, marker;
      features = map.queryRenderedFeatures(e.point, {
        layers: ['markers']
      });
      if (features.length) {
        marker = features[0];
        return getLocContent(marker);
      }
    };
    $body.on('click touchend', '#right .band', closeRight);
    $body.on('click touchend', '.float .band.top', closeFloater);
    $body.on('change', '#points input', listLocations);
    colors = {
      white: $('#palette .white').css('color'),
      light: $('#palette .light').css('color'),
      medium: $('#palette .medium').css('color'),
      dark: $('#palette .dark').css('color'),
      darker: $('#palette .darker').css('color'),
      black: $('#palette .black').css('color'),
      yellow: $('#palette .yellow').css('color')
    };
    return initMap();
  });

}).call(this);
